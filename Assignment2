class SetADT:  
    def __init__(self):  
        self.elements = {}  
    
    def add(self, element):  
        self.elements[element] = None  
 
    def remove(self, element):  
        if element in self.elements:  
            del self.elements[element]  
        else:  
            raise KeyError(f"Element {element} not found in the set")  
 
    def contains(self, element):  
        return element in self.elements  
 
    def size(self):  
        return len(self.elements)  
 
    def iterator(self):  
        return iter(self.elements.keys())  
 
    def intersection(self, other_set):  
        if not isinstance(other_set, SetADT): 
            raise TypeError("Argument must be a SetADT instance.") 
        result = SetADT()  
        for element in self.elements:  
            if element in other_set.elements:  
                result.add(element)  
        return result  
 
    def union(self, other_set):  
        if not isinstance(other_set, SetADT): 
            raise TypeError("Argument must be a SetADT instance.") 
        result = SetADT()  
        for element in self.elements:  
            result.add(element)  
        for element in other_set.elements:  
            result.add(element)  
        return result  
 
    def difference(self, other_set):  
        if not isinstance(other_set, SetADT): 
            raise TypeError("Argument must be a SetADT instance.") 
        result = SetADT()  
        for element in self.elements:  
            if element not in other_set.elements:  
                result.add(element)  
        return result  
 
    def subset(self, other_set):  
        if not isinstance(other_set, SetADT): 
            raise TypeError("Argument must be a SetADT instance.") 
        return set(self.elements.keys()).issubset(other_set.elements.keys())  
 

if __name__ == "__main__":  
    set1 = SetADT()  
    set1.add(1)  
    set1.add(2)  
    set1.add(3)  
 
    set2 = SetADT()  
    set2.add(2)  
    set2.add(3)  
    set2.add(4)  
    print("Set 1 contains 2:", set1.contains(2))   
    print("Set 1 size:", set1.size())   
    set1.remove(2)  
    print("Set 1 after removing 2:", [x for x in set1.iterator()])   
    union_set = set1.union(set2)  
    print("Union of Set 1 and Set 2:", [x for x in union_set.iterator()])   
    intersection_set = set1.intersection(set2)  
    print("Intersection of Set 1 and Set 2:", [x for x in intersection_set.iterator()])  
